!sudo pip install --no-deps tensorflow==1.15.3
!sudo pip install --no-deps keras==2.2.4

%cd
  
!git clone --quiet https://github.com/matterport/Mask_RCNN.git

%cd ~/Mask_RCNN

!pip install -q PyDrive
!pip install -r requirements.txt
!python setup.py install

!git clone https://github.com/theOne2399/speed


from os import listdir
from matplotlib import pyplot
from xml.etree import ElementTree
from numpy import zeros
from numpy import asarray
from mrcnn.utils import Dataset
from mrcnn.config import Config
from mrcnn.model import MaskRCNN

class SpeedDataset(Dataset):

	def load_dataset(self, dataset_dir, is_train=True):
		
		self.add_class("dataset", 1, "40 Km/hr")
		
		images_dir = dataset_dir + '/images/'
		annotations_dir = dataset_dir + '/annots/'
		
		for filename in listdir(images_dir):
			image_id = filename[:-4]
			if image_id in ['00090']:
				continue
			if is_train and int(image_id) >= 15:
				continue
			if not is_train and int(image_id) < 15:
				continue
			img_path = images_dir + filename
			ann_path = annotations_dir + image_id + '.xml'
			self.add_image('dataset', image_id=image_id, path=img_path, annotation=ann_path)

	def extract_boxes(self, filename):
		tree = ElementTree.parse(filename)
		root = tree.getroot()
		boxes = list()
		for box in root.findall('.//bndbox'):
			xmin = int(box.find('xmin').text)
			ymin = int(box.find('ymin').text)
			xmax = int(box.find('xmax').text)
			ymax = int(box.find('ymax').text)
			coors = [xmin, ymin, xmax, ymax]
			boxes.append(coors)
		width = int(root.find('.//size/width').text)
		height = int(root.find('.//size/height').text)
		return boxes, width, height

	def load_mask(self, image_id):
		info = self.image_info[image_id]
		path = info['annotation']
		boxes, w, h = self.extract_boxes(path)
		masks = zeros([h, w, len(boxes)], dtype='uint8')
		class_ids = list()
		for i in range(len(boxes)):
			box = boxes[i]
			row_s, row_e = box[1], box[3]
			col_s, col_e = box[0], box[2]
			masks[row_s:row_e, col_s:col_e, i] = 1
			class_ids.append(self.class_names.index('40 Km/hr'))
		return masks, asarray(class_ids, dtype='int32')

	def image_reference(self, image_id):
		info = self.image_info[image_id]
		return info['path']

class SpeedConfig(Config):
	NAME = "speed_cfg"
	NUM_CLASSES = 1 + 1
	GPU_COUNT = 1
	IMAGES_PER_GPU = 1
	STEPS_PER_EPOCH = 10

train_set = SpeedDataset()
train_set.load_dataset('speed', is_train=True)
train_set.prepare()
print('Train: %d' % len(train_set.image_ids))

test_set = SpeedDataset()
test_set.load_dataset('speed', is_train=False)
test_set.prepare()
print('Test: %d' % len(test_set.image_ids))


config = SpeedConfig()


model = MaskRCNN(mode='training', model_dir='./', config=config)

!wget https://github.com/matterport/Mask_RCNN/releases/download/v2.0/mask_rcnn_coco.h5

model.load_weights('mask_rcnn_coco.h5', by_name=True, exclude=["mrcnn_class_logits", "mrcnn_bbox_fc",  "mrcnn_bbox", "mrcnn_mask"])

model.train(train_set, test_set, learning_rate=config.LEARNING_RATE, epochs=5, layers='heads') 

class PredictionConfig(Config):

	NAME = "speed_cfg"
	NUM_CLASSES = 1 + 1
	GPU_COUNT = 1
	IMAGES_PER_GPU = 1

def evaluate_model(dataset, model, cfg):
	APs = list()
	for image_id in dataset.image_ids:
		image, image_meta, gt_class_id, gt_bbox, gt_mask = load_image_gt(dataset, cfg, image_id, use_mini_mask=False)
		scaled_image = mold_image(image, cfg)
		sample = expand_dims(scaled_image, 0)

		yhat = model.detect(sample, verbose=0)
		r = yhat[0]

		AP, _, _, _ = compute_ap(gt_bbox, gt_class_id, gt_mask, r["rois"], r["class_ids"], r["scores"], r['masks'])
		APs.append(AP)

	mAP = mean(APs)
	return mAP
  
  
  
  from os import listdir
from xml.etree import ElementTree
from numpy import zeros
from numpy import asarray
from numpy import expand_dims
from numpy import mean
from mrcnn.config import Config
from mrcnn.model import MaskRCNN
from mrcnn.utils import Dataset
from mrcnn.utils import compute_ap
from mrcnn.model import load_image_gt
from mrcnn.model import mold_image

cfg = PredictionConfig()
model = MaskRCNN(mode='inference', model_dir='./', config=cfg)
model.load_weights('speed_cfg20210510T0915/mask_rcnn_speed_cfg_0005.h5', by_name=True)
train_mAP = evaluate_model(train_set, model, cfg)
print("Train mAP: %.3f" % train_mAP)
test_mAP = evaluate_model(test_set, model, cfg)
print("Test mAP: %.3f" % test_mAP)

def plot_actual_vs_predicted(dataset, model, cfg,i):
  image = dataset.load_image(i)
  mask, _ = dataset.load_mask(i)
  scaled_image = mold_image(image, cfg)
  sample = expand_dims(scaled_image, 0)
  yhat = model.detect(sample, verbose=0)[0]
  pyplot.subplot(1,2, i*2+1)
  pyplot.imshow(image)
  pyplot.title('Actual')

  for j in range(mask.shape[2]):
    pyplot.imshow(mask[:, :, j], cmap='gray', alpha=0.3)
 
  pyplot.subplot(1, 2, i*2+2)
  pyplot.imshow(image)
  pyplot.title('Predicted')
  ax = pyplot.gca()
  for box in yhat['rois']:
    y1, x1, y2, x2 = box
    width, height = x2 - x1, y2 - y1
    rect = Rectangle((x1, y1), width, height, fill=False, color='red')

    ax.add_patch(rect)
  pyplot.show()
  
  
  from os import listdir
from xml.etree import ElementTree
from numpy import zeros
from numpy import asarray
from numpy import expand_dims
from matplotlib import pyplot
from matplotlib.patches import Rectangle
from mrcnn.config import Config
from mrcnn.model import MaskRCNN
from mrcnn.model import mold_image
from mrcnn.utils import Dataset

image_id = 0
pred_set = SpeedDataset()
pred_set.load_dataset('speed')
plot_actual_vs_predicted(train_set, model, cfg, image_id)
